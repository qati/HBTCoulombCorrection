# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_KGInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_KGInt')
    _KGInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_KGInt', [dirname(__file__)])
        except ImportError:
            import _KGInt
            return _KGInt
        try:
            _mod = imp.load_module('_KGInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _KGInt = swig_import_helper()
    del swig_import_helper
else:
    import _KGInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def integrateLevyCPU(*args):
    return _KGInt.integrateLevyCPU(*args)
integrateLevyCPU = _KGInt.integrateLevyCPU

def integrateACPU(*args):
    return _KGInt.integrateACPU(*args)
integrateACPU = _KGInt.integrateACPU

def hyp1f1_FFF(n1, kr, eta, eps):
    return _KGInt.hyp1f1_FFF(n1, kr, eta, eps)
hyp1f1_FFF = _KGInt.hyp1f1_FFF

def hyp1f1(n1, a, b, n2, n3, eps, x0, x1, N):
    return _KGInt.hyp1f1(n1, a, b, n2, n3, eps, x0, x1, N)
hyp1f1 = _KGInt.hyp1f1

def intLevy(levy, maxr, error):
    return _KGInt.intLevy(levy, maxr, error)
intLevy = _KGInt.intLevy
class Levyd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Levyd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Levyd, name)
    __repr__ = _swig_repr

    def __init__(self, R, alpha, limit1, limit2, dr, n, error):
        this = _KGInt.new_Levyd(R, alpha, limit1, limit2, dr, n, error)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, r):
        return _KGInt.Levyd___call__(self, r)

    def get(self, n1, n2):
        return _KGInt.Levyd_get(self, n1, n2)

    def get_alpha(self):
        return _KGInt.Levyd_get_alpha(self)
    __swig_destroy__ = _KGInt.delete_Levyd
    __del__ = lambda self: None
Levyd_swigregister = _KGInt.Levyd_swigregister
Levyd_swigregister(Levyd)

class Coulomb2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coulomb2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coulomb2d, name)
    __repr__ = _swig_repr

    def __init__(self, _levy, _pion_mass=139.5701835, _eps=1e-8):
        this = _KGInt.new_Coulomb2d(_levy, _pion_mass, _eps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def integrateTheta(self, r):
        return _KGInt.Coulomb2d_integrateTheta(self, r)

    def integrateTheta_MCMC(self, r, path):
        return _KGInt.Coulomb2d_integrateTheta_MCMC(self, r, path)

    def set_k(self, _k):
        return _KGInt.Coulomb2d_set_k(self, _k)

    def set_sigma(self, _sigma):
        return _KGInt.Coulomb2d_set_sigma(self, _sigma)

    def set_R(self, _R):
        return _KGInt.Coulomb2d_set_R(self, _R)

    def integrateLevy(self, maxr, error):
        return _KGInt.Coulomb2d_integrateLevy(self, maxr, error)

    def Levy(self, n1, path):
        return _KGInt.Coulomb2d_Levy(self, n1, path)

    def integrate(self, *args):
        return _KGInt.Coulomb2d_integrate(self, *args)
    __swig_destroy__ = _KGInt.delete_Coulomb2d
    __del__ = lambda self: None
Coulomb2d_swigregister = _KGInt.Coulomb2d_swigregister
Coulomb2d_swigregister(Coulomb2d)


def integrateLevyCPU(rs, alphas, errors, error_rngs, time=True):
    res = _KGInt.integrateLevyCPU(len(rs)*2, rs, alphas, errors, error_rngs)
    if time:
        print("->CPU: elapsed time = %.1f ms"%res[0])
    return res[1].reshape(len(rs),2);

#def integrateLevyGPU(blockNum, threadNum, rs, alphas, errors, error_rngs, time=True):
#    res = _KGInt.integrateLevyGPU(blockNum, threadNum, len(rs)*2, rs, alphas, errors, error_rngs)
#    if time:
#        print("->GPU: elapsed time = %.1f ms"%res[0])
#    return res[1].reshape(len(rs),2);

def integrateACPU(etas, krs, errors, int_errors, time=True):
    res = _KGInt.integrateACPU(len(etas)*2, etas, krs, errors, int_errors)
    if time:
        print("->CPU: elapsed time = %.1f ms"%res[0])
    return res[1].reshape(len(etas),2);

#def integrateAGPU(blockNum, threadNum, etas, krs, errors, int_errors, time=True):
#    res = _KGInt.integrateAGPU(blockNum, threadNum, len(etas)*2, etas, krs, errors, int_errors)
#    if time:
#        print("->GPU: elapsed time = %.1f ms"%res[0])
#    return res[1].reshape(len(etas),2);

def hyp1f1_FFF(n1, kr, eta, eps):
    import numpy as np
    res = _KGInt.hyp1f1_FFF(2*n1, kr, eta, eps)
    return np.array(list(map(complex, res[::2], res[1::2])))

def hyp1f1(a,b,z, x0, x1, N, eps=1e-8):
    import numpy as np
    res = _KGInt.hyp1f1(2*len(z), a, b, z.real, z.imag, eps, x0, x1, N)
    return np.array(list(map(complex, res[::2], res[1::2])))

# This file is compatible with both classic and new-style classes.


